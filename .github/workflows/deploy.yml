name: Deploy HeatSeaker Backend

on:
  push:
    branches:
      - main  # Runs this workflow only when pushing to `main`

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Create .env file
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" > .env
          echo "PORT=8080" >> .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 962208939254.dkr.ecr.us-east-1.amazonaws.com
          docker images  # Check if images are available locally

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build & Push Docker Image
        run: |
          docker buildx build --platform linux/arm64 --push -t 962208939254.dkr.ecr.us-east-1.amazonaws.com/heatseaker-backend .
      
      - name: Free Disk Space & Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 3.82.36.228 >> ~/.ssh/known_hosts
          
          # Fetch EC2 Public IP dynamically
          AWS_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=heatseaker-backend" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)

          ssh -o StrictHostKeyChecking=no -i <(echo "$SSH_PRIVATE_KEY") ec2-user@$AWS_IP << EOF
            echo "Cleaning up disk space..."
            docker image prune -a -f
            docker container prune -f
            docker volume prune -f
            df -h

            echo "Logging into AWS ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 962208939254.dkr.ecr.us-east-1.amazonaws.com

            echo "Pulling latest image..."
            docker pull 962208939254.dkr.ecr.us-east-1.amazonaws.com/heatseaker-backend:latest

            echo "Checking available images..."
            docker images  # Debugging: Show available images

            IMAGE_NAME="962208939254.dkr.ecr.us-east-1.amazonaws.com/heatseaker-backend:latest"
            echo "Running Docker with IMAGE_NAME: \$IMAGE_NAME"

            # Stop and remove old containers
            docker ps -q --filter "publish=8080" | xargs -r docker stop
            docker ps -aq --filter "publish=8080" | xargs -r docker rm

            # Validate IMAGE_NAME before running
            if [[ -n "\$IMAGE_NAME" ]]; then
              docker run -d -p 8080:8080 --env-file /home/ec2-user/.env "\$IMAGE_NAME"
            else
              echo "❌ ERROR: IMAGE_NAME is empty! Exiting deployment."
              exit 1
            fi
          EOF